#!/usr/bin/python3
# -*- coding: utf-8 -*-

import argparse
from bs4 import BeautifulSoup
import json
import os
from parsel import Selector
from pprint import pprint
import re
import requests
from subprocess import Popen, PIPE

parser = argparse.ArgumentParser()
parser.add_argument("-s", "--search", help="Cerca una stringa specifica nel nome", default="")
parser.add_argument("-y", "--anno-release", help="Restringi la ricerca film per anno di rilascio", type=int)
parser.add_argument("-d", "--download", help="Aggiungi il link mega alla coda download (richiede mega-cli installato)",
                    action="store_true", default=False)
parser.add_argument("-m", "--mediainfo", help="Scarica il file metadati del video da hd4me", action="store_true",
                    default=False)
parser.add_argument("-i", "--info", help="Scarica i dettagli del film da IMdb", action="store_true", default=False)
parser.add_argument("--rating", help="Ordina i film per IMdb rating", action="store_true", default=False)
parser.add_argument("--data", help="Ordina i film per data di rilascio", action="store_true", default=False)
parser.add_argument("-p", "--path",
                    help="Imposta un percorso per il download, se assente scarica nella directory corrente")
args = parser.parse_args()


def main():
    tot_lookup = requests.get('https://hd4me.net/lista-film', timeout=10)
    selector = Selector(tot_lookup.text)

    texts = selector.xpath("//li[@class='title_item']/a[1]/text()").getall()
    links = selector.xpath("//li[@class='title_item']/a[1]/@href").getall()

    data = dict(zip(texts, links))
    movies = {}

    for k, v in data.items():

        try:
            hd4me_title = re.search(r"(^.*)\s\(", k)[1]
        except:
            hd4me_title = k

        if args.search.lower() in hd4me_title.lower():

            link = "https://hd4me.net/" + v.replace("?p=", "")
            hd4me_page = requests.get(link)
            mega_link = ""

            if args.mediainfo:
                info = get_megainfo(hd4me_page)
                response = requests.get(info)
                print(response.text)
                continue
            else:
                mega_link = get_megalink(hd4me_page)

            imdb_json = get_imdb_json(hd4me_page)
            plot = imdb_json['description']
            imdb_title = imdb_json['name'].replace("&apos;", "'")
            genres = ", ".join(imdb_json['genre'])
            rating = imdb_json['aggregateRating']['ratingValue']
            date_published = imdb_json['datePublished']
            year = imdb_json['datePublished'][0:4]

            if args.anno_release:
                if str(args.anno_release) == year:
                    m = Movie(hd4me_title, imdb_title, date_published, rating, genres, plot, mega_link)
                    movies[k] = m

            else:
                m = Movie(hd4me_title, imdb_title, date_published, rating, genres, plot, mega_link)
                movies[k] = m

    if args.rating:
        movies = sort_by_rating(movies)

    if args.data:
        movies = sort_by_year(movies)

    for title, movie in movies.items():
        if args.info:
            print("%s (Data: %s, Rating: %s)\nDownload: %s\nGenere: %s\nTrama:%s" % (
            movie.imdb_title, movie.date_published, movie.rating, movie.mega_link, movie.genres, movie.plot))
        else:
            print("%s - (%s, %s - rating: %s)" % (movie.hd4me_title, movie.imdb_title, movie.date_published[0:4], movie.rating))

        if args.download:

            if args.path:
                print("Download in " + args.path)
                p = Popen(["mega-get", "-q", "--ignore-quota-warn", movie.mega_link, args.path], stdout=PIPE,
                          stderr=PIPE)
            else:
                print("Download in " + os.getcwd())
                p = Popen(["mega-get", "-q", "--ignore-quota-warn", movie.mega_link], stdout=PIPE, stderr=PIPE)

            output, error = p.communicate()

            if p.returncode != 0:
                print("Errore download: %s" % (output.decode('ascii')))
            else:
                print("Download iniziato")


def get_megalink(response):
    m_selector = Selector(response.text)

    try:
        hd4me_link = m_selector.xpath('//a[@class="bot1"]/@href').get()
        return hd4me_link.replace('https://hd4me.net/?', 'https://mega.nz/#')
    except:
        return m_selector.xpath('//a[@class="bot"]/@href').get()


def get_megainfo(response):
    m_selector = Selector(response.text)
    hd4me_link = m_selector.xpath('//a[@class="bot"]/@href').get()

    return (hd4me_link)


def get_imdb_json(response):
    i_selector = Selector(response.text)
    
    imdb_id = i_selector.xpath('//div[@class="imdbRatingPlugin"]/@data-title').get()
    if imdb_id == None:
        imdb_id = i_selector.xpath('//span[@class="imdbRatingPlugin"]/@data-title').get()

    imdb_json = json.loads("""
    {
      "name": "",
      "description": "",
      "aggregateRating": {
        "ratingValue": 0
      },
      "genre": [],
      "datePublished": "",
      "duration": ""
    }
    """)

    try:
        f = requests.get('https://www.imdb.com/title/' + imdb_id, timeout=10)
    except:
        return (imdb_json)
    else:
        bf = BeautifulSoup(f.content, 'html.parser')
        script = bf.find_all('script')[2]
        imdb_json = json.loads(script.text)
        return (imdb_json)


def sort_by_rating(movies):
    sorted_movies = sorted(movies.items(), key=lambda x: x[1].rating, reverse=True)
    return dict(sorted_movies)


def sort_by_year(movies):
    sorted_movies = sorted(movies.items(), key=lambda x: x[1].date_published, reverse=True)
    return dict(sorted_movies)


class Movie:
    def __init__(self, hd4me_title, imdb_title, date_published, rating, genres, plot, mega_link):
        self.hd4me_title = hd4me_title
        self.imdb_title = imdb_title
        self.date_published = date_published
        self.rating = rating
        self.genres = genres
        self.plot = plot
        self.mega_link = mega_link


if __name__ == '__main__': main()
